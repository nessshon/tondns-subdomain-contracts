{-
    DNS Collection Contract
    TON DNS X | @tondnsx_bot

    author: Shon Ness | @nessshon | https://github.com/nessshon
-}

#include "imports/constants.fc";
#include "imports/err-codes.fc";
#include "imports/op-codes.fc";
#include "imports/stdlib.fc";
#include "imports/utils.fc";

(slice, cell, cell, cell, cell) load_data() impure {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),
        ds~load_ref(),
        ds~load_ref(),
        ds~load_ref(),
        ds~load_ref()
    );
}

() save_data(slice owner_addr, cell content, cell item_code, cell royalty_params, cell domain) impure inline {
    set_data(begin_cell()
        .store_slice(owner_addr)
        .store_ref(content)
        .store_ref(item_code)
        .store_ref(royalty_params)
        .store_ref(domain)
        .end_cell()
    );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op, 32)
        .store_uint(query_id, 64);
    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }
    send_raw_message(msg.end_cell(), send_mode);
}

() send_royalty(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::report_royalty_params, 32)
        .store_uint(query_id, 64)
        .store_slice(data);
    send_raw_message(msg.end_cell(), 64);
}

() deploy_nft_item(slice owner_addr, int item_index, slice subdomain, cell domain, cell item_code) impure {
    cell state_init = calculate_nft_item_state_init(item_index, item_code);
    slice nft_address = calculate_nft_item_address(workchain, state_init);

    cell subdomain_cell = begin_cell()
        .store_slice(subdomain)
        .end_cell();
    cell domain_cell = begin_cell()
        .store_slice(domain.begin_parse())
        .end_cell();
    cell payload = begin_cell()
        .store_uint(1, 32)
        .store_uint(cur_lt(), 64)
        .store_slice(owner_addr)
        .store_ref(subdomain_cell)
        .store_ref(domain_cell)
        .store_coins(1)
        .store_uint(0, 1)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(0)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(payload);
    send_raw_message(msg.end_cell(), 64);
}


() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }
    slice sender_addr = cs~load_msg_addr();
    force_chain(sender_addr);
    int op = in_msg_body~load_uint(32);

    (slice owner_addr, cell content, cell item_code, cell royalty_params, cell domain) = load_data();

    if (op == 0) {
        throw_unless(err::access_denied, equal_slices(sender_addr, owner_addr));
        throw_unless(err::domain_price_too_low, msg_value >= min_tons_for_mint);
        slice subdomain = read_domain_from_comment(in_msg_body);
        int len = slice_bits(subdomain);

        throw_unless(err::domain_too_short, len >= 1 * 8);
        throw_unless(err::domain_too_long, len <= 126 * 8);
        throw_unless(err::domain_not_aligned, mod(len, 8) == 0);
        throw_unless(err::domain_invalid_format, check_domain_string(subdomain));

        int item_index = slice_hash(subdomain);
        deploy_nft_item(owner_addr, item_index, subdomain, domain, item_code);
        return ();
    }

    int query_id = in_msg_body~load_uint(64);

    if (op == op::deploy) {
        return ();
    }
    if (op == op::approve) {
        raw_reserve(min_tons_for_storage, 0);
        send_msg(owner_addr, 0, op::top_up, query_id, null(), 128);
        return ();
    }
    if (op == op::disapprove) {
        raw_reserve(min_tons_for_storage, 0);
        send_msg(owner_addr, 0, op::bounce, query_id, null(), 128);
        return ();
    }
    if (op == op::get_royalty_params) {
        send_royalty(sender_addr, query_id, royalty_params.begin_parse());
        return ();
    }

    throw_unless(err::access_denied, equal_slices(sender_addr, owner_addr));
    if (op == op::change_owner) {
        save_data(in_msg_body~load_msg_addr(), content, item_code, royalty_params, domain);
        return ();
    }
    if (op == op::edit_content) {
        save_data(owner_addr, in_msg_body~load_ref(), item_code, in_msg_body~load_ref(), domain);
        return ();
    }
    throw(err::unknown_op_code);
}

slice get_domain() method_id {
    (_, _, _, _, cell domain) = load_data();
    return domain.begin_parse();
}

slice get_full_domain() method_id {
    (_, _, _, _, cell domain) = load_data();
    return begin_cell()
        .store_slice(const::ton)
        .store_uint(0, 8)
        .store_slice(domain.begin_parse())
        .store_uint(0, 8)
        .end_cell()
        .begin_parse();
}

(int, cell, slice) get_collection_data() method_id {
    (slice owner_addr, cell content, _, _, _) = load_data();
    return (-1, content, owner_addr);
}

slice get_nft_address_by_index(int index) method_id {
    (_, _, cell item_code, _, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, item_code);
    return calculate_nft_item_address(workchain, state_init);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    (_, cell content, _, _, cell domain) = load_data();
    slice subdomain = individual_nft_content.begin_parse();
    (cell name, cell image, cell uri) = create_nft_metadata(content, domain.begin_parse(), subdomain);

    cell keyvalue_map = new_dict();
    keyvalue_map~udict_set_ref(256, key::name, name);
    keyvalue_map~udict_set_ref(256, key::image, image);
    keyvalue_map~udict_set_ref(256, key::uri, uri);
    return begin_cell().store_uint(0, 8).store_dict(keyvalue_map).end_cell();
}

(int, int, slice) royalty_params() method_id {
    (_, _, _, cell royalty_params, _) = load_data();
    slice rs = royalty_params.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

(int, cell) dnsresolve(slice subdomain, int category) method_id {
    throw_unless(err::bad_subdomain_length, mod(slice_bits(subdomain), 8) == 0);
    int starts_with_zero_byte = subdomain.preload_int(8) == 0;
    if (starts_with_zero_byte & (slice_bits(subdomain) == 8)) {
        return (8, null());
    }
    if (starts_with_zero_byte) {
        subdomain~load_uint(8);
    }
    int top_subdomain_bits = get_top_domain_bits(subdomain);
    slice top_subdomain = subdomain~load_bits(top_subdomain_bits);
    int item_index = slice_hash(top_subdomain);

    cell result = begin_cell()
        .store_uint(dns_next_resolver::prefix, 16)
        .store_slice(get_nft_address_by_index(item_index))
        .end_cell();
    return (top_subdomain_bits + (starts_with_zero_byte ? 8 : 0), result);
}
