{-
    DNS Item Contract
    TON DNS X | @tondnsx_bot

    author: Shon Ness | @nessshon | https://github.com/nessshon
-}

#include "imports/constants.fc";
#include "imports/err-codes.fc";
#include "imports/op-codes.fc";
#include "imports/stdlib.fc";
#include "imports/utils.fc";

(int, int, slice, slice, cell, cell, cell) load_data() impure {
    slice ds = get_data().begin_parse();
    (int index, slice collection_addr) = (ds~load_uint(256), ds~load_msg_addr());

    if (ds.slice_bits() > 0) {
        return (-1, index, collection_addr, ds~load_msg_addr(), ds~load_ref(), ds~load_ref(), ds~load_ref());
    } else {
        return (0, index, collection_addr, null(), null(), null(), null());
    }
}

() save_data(int index, slice collection_addr, slice owner_addr, cell content, cell subdomain, cell domain) impure {
    set_data(
        begin_cell()
            .store_uint(index, 256)
            .store_slice(collection_addr)
            .store_slice(owner_addr)
            .store_ref(content)
            .store_ref(subdomain)
            .store_ref(domain)
            .end_cell()
    );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op, 32)
        .store_uint(query_id, 64);
    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }
    send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int index, slice collection_addr, slice owner_addr, cell content, cell subdomain, cell domain, slice sender_addr, int query_id, slice in_msg_body, int fwd_fees) impure inline {
    throw_unless(err::access_denied, equal_slices(sender_addr, owner_addr));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1);
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage;
    if (forward_amount) {
        rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0;
    if (need_response) {
        rest_amount -= fwd_fees;
    }

    throw_unless(err::low_balance, rest_amount >= 0);

    if (forward_amount) {
        builder payload = begin_cell().store_slice(owner_addr).store_slice(in_msg_body);
        send_msg(new_owner_address, forward_amount, op::ownership_assigned, query_id, payload, 1);
    }
    if (need_response) {
        force_chain(response_destination);
        send_msg(response_destination, rest_amount, op::excesses, query_id, null(), 1);
    }
    save_data(index, collection_addr, new_owner_address, content, subdomain, domain);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }
    slice sender_addr = cs~load_msg_addr();
    force_chain(sender_addr);
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fees = muldiv(cs~load_coins(), 3, 2);

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (int init?, int index, slice collection_addr, slice owner_addr, cell content, cell subdomain, cell domain) = load_data();

    if (~ init?) {
        throw_unless(err::access_denied, equal_slices(collection_addr, sender_addr));
        content = begin_cell().store_uint(0, 8).store_dict(new_dict()).end_cell();
        (owner_addr, subdomain, domain) = (in_msg_body~load_msg_addr(), in_msg_body~load_ref(), in_msg_body~load_ref());

        if (in_msg_body.slice_data_empty?() == false) {
            var forward_amount = in_msg_body~load_coins();
            if (forward_amount) {
                send_msg(owner_addr, forward_amount, op::ownership_assigned, 0, begin_cell().store_slice(collection_addr).store_slice(in_msg_body), 2 + 1);
            }
        }
        raw_reserve(min_tons_for_storage, 0);
        send_msg(collection_addr, 0, op::approve, query_id, null(), 128);
        save_data(index, collection_addr, owner_addr, content, subdomain, domain);
        return ();
    }
    if (op == op::deploy) {
        throw_unless(err::access_denied, equal_slices(sender_addr, collection_addr));
        send_msg(collection_addr, 0, op::disapprove, 0, null(), 64);
        return ();
    }
    if (op == op::transfer) {
        transfer_ownership(my_balance, index, collection_addr, owner_addr, content, subdomain, domain, sender_addr, query_id, in_msg_body, fwd_fees);
        return ();
    }
    if (op == op::get_static_data) {
        send_msg(sender_addr, 0, op::report_static_data, query_id, begin_cell().store_uint(index, 256).store_slice(collection_addr), 64);
        return ();
    }
    if (op == op::change_dns_record) {
        throw_unless(err::access_denied, equal_slices(sender_addr, owner_addr));

        int key = in_msg_body~load_uint(256);
        int has_value = in_msg_body.slice_refs() > 0;

        slice cs = content.begin_parse();
        throw_unless(err::invalid_onchain_tag, cs~load_uint(8) == 0);
        cell domains = cs~load_dict();

        if (has_value) {
            cell value = in_msg_body~load_ref();
            domains~udict_set_ref(256, key, value);
        } else {
            domains~udict_delete?(256, key);
        }

        content = begin_cell().store_uint(0, 8).store_dict(domains).end_cell();
        save_data(index, collection_addr, owner_addr, content, subdomain, domain);
        return ();
    }
    throw(err::unknown_op_code);
}


(int, int, slice, slice, cell) get_nft_data() method_id {
    (int init?, int index, slice collection_addr, slice owner_addr, _, cell subdomain, _) = load_data();
    return (init?, index, collection_addr, owner_addr, subdomain);
}

slice get_domain() method_id {
    (_, _, _, _, _, cell subdomain, _) = load_data();
    return subdomain.begin_parse();
}

slice get_full_domain() method_id {
    (_, _, _, _, _, cell subdomain, cell domain) = load_data();
    return begin_cell()
        .store_slice(const::ton)
        .store_uint(0, 8)
        .store_slice(domain.begin_parse())
        .store_uint(0, 8)
        .store_slice(subdomain.begin_parse())
        .store_uint(0, 8)
        .end_cell()
        .begin_parse();
}

(int, cell) dnsresolve(slice subdomain, int category) method_id {
    int subdomain_bits = slice_bits(subdomain);
    throw_unless(err::bad_subdomain_length, mod(subdomain_bits, 8) == 0);
    (_, _, _, _, cell content, _, _) = load_data();

    slice cs = content.begin_parse();
    throw_unless(err::invalid_onchain_tag, cs~load_uint(8) == 0);
    cell keyvalue_map = cs~load_dict();

    int starts_with_zero_byte = subdomain.preload_int(8) == 0;
    throw_unless(err::no_first_zero_byte, starts_with_zero_byte);
    if (subdomain_bits > 8) {
        category = dns_next_resolver::key;
    }
    if (category == 0) {
        return (8, keyvalue_map);
    }
    (cell value, _) = keyvalue_map.udict_get_ref?(256, category);
    return (8, value);
}
